name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Python dependencies for testing
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/requirements.txt
          pip install ruff # Also install linter

      - name: Lint with ruff
        run: |
          ruff check .

      # Testing sequence
      - name: Build and Run Services in Background
        run: |
          # We run 'docker compose up' in detached mode (-d)
          # This will build the images and start all containers
          docker compose up --build -d

      - name: Wait for Services to be Healthy
        run: |
          # This is a simple but effective health check loop.
          # It waits for up to 2 minutes for the forecasting API to respond.
          echo "Waiting for services to start..."
          timeout 120s bash -c 'until curl -s -f http://localhost:8000/health; do echo "Waiting for forecasting API..."; sleep 5; done'
          echo "Forecasting API is up!"
          timeout 120s bash - 'until curl -s -f http://localhost:8001/health; do echo "Waiting for simulation API..."; sleep 5; done'
          echo "Simulation API is up!"
          echo "All services are healthy."

      - name: Run Pytest against running services
        run: |
          pytest tests/

      # Cleanup
      - name: Stop Services
        if: always()
        run: |
          docker compose down --volumes