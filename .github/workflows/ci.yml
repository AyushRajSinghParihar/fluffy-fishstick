name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Python dependencies for testing
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/requirements.txt
          pip install ruff

      - name: Lint with ruff
        run: |
          ruff check .

      # Testing sequence with retry logic
      - name: Build and Run Services in Background
        run: |
          # Retry docker compose up with exponential backoff
          for i in {1..3}; do
            echo "Attempt $i: Building and starting services..."
            if docker compose up --build -d; then
              echo "Services started successfully!"
              break
            else
              echo "Attempt $i failed. Waiting before retry..."
              if [ $i -lt 3 ]; then
                sleep $((i * 10))  # Wait 10s, then 20s
                docker compose down --volumes || true  # Clean up any partial state
              else
                echo "All attempts failed"
                exit 1
              fi
            fi
          done

      - name: Wait for Services to be Healthy
        run: |
          echo "Waiting for services to start..."
          timeout 120s bash -c 'until curl -s -f http://localhost:8000/health; do echo "Waiting for forecasting API..."; sleep 5; done'
          echo "Forecasting API is up!"
          timeout 120s bash -c 'until curl -s -f http://localhost:8001/health; do echo "Waiting for simulation API..."; sleep 5; done'
          echo "Simulation API is up!"
          echo "All services are healthy."

      - name: Run Pytest against running services
        run: |
          pytest tests/
        env:
          FORECASTING_API_URL: http://localhost:8000
          SIMULATION_API_URL: http://localhost:8001

      # Cleanup
      - name: Stop Services
        if: always()
        run: |
          docker compose down --volumes